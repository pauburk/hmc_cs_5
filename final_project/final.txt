CS5 Gold/Black: Final Project
Filename: final.txt
Name: Paul Burke
Problem description: Picobot using genetic algoritms

!!!MAKE SURE TO RUN THE SIMULATION IF YOU ARE USING MACOS TERMINAL!!!
!!!IT IS AN ACTUAL PICOBOT SIMULATOR WITH COLORS!!!

Link to github repo with all my stuff from the course
https://github.com/pauburk/hmc_cs_5

CODING PROCESS:

I followed pretty much the project page in terms of what I did in what order. So first, I created the class Program, then World, then tested and debugged both of those, and then coded all the genetic algorithm stuff. For testing, I used a lot of print statements, and constructed demo simulations and ran them in order to figure out whether my code worked. As I continued to add more features and continued to run simulations, I would discover more bugs and then fix those. When I added the diamond map I got a major bug infestation.

I also feel like I should talk about how I created the actual picobot simulator with the proper colors and everything. So I was inspired by the sleepwalking student problem, where we used highlight colors as backgrounds and whatnot. I decided to use only the highlight colors, with no characters at all, so it would just be squares of colors. Google docs won't highlight empty spaces by themselves, but Python will!! I just used the formatting, it was a bunch of random stuff designating the color, then two spaces (to make it square), then the ending of the color thing. When I printed the world, I just appended every character to the end of a ginourmous string. Heres the actual code used for the green square which represents picobot: "\x1b[0;30;42m  \x1b[0m".

HYPERPARAMETERS:

I chose my hyperparameters randomly at first, but then as I continued to run simulations I got an idea for what worked and what didn't. I started out with a mutation every 20 programs (0.05, or 5% of the time), and through playing around (I went up to 30% of the time), I settled on 10% of the time, which seemed like a nice number somewhere in the middle and it also worked pretty well (lower and higher mutation rates took longer to arrive at a well-performing program). For the crossover percentage (how many "elite" programs I would use for crossover), I also settled on 10%. This was more random - I just didn't want to use too few because then I would get too many similar programs, but I didn't want to dilute it with not as good programs. For population size, number of generations, number of trails, etc., I just chose the largest possible number that would execute in an amount of time I could wait for.

RESULTS:

Sooo...the number 1 and 2 files in my github repo (linked above) are from the diamond room, and the # 3/4 files are from the empty room. The empty room easily got over 95% coverage, with averages of around 80%. It would evolve to use the lawnmower strategy, though it would usually mess up a corner or two. Similarly, it could evolve a lawnmover + steps strategy for the diamond room, but it would only get through half of the room before it would get stuck when it had to deal with the opposite kind of steps. I also included some of the more interesting programs it created, in the empty1/2.txt and diamond1/2/3.txt files.

Here's a final program from the empty room (with an interesting beginning and ending):
- fitness of 0.9924

0 NExx -> S 3
0 NxWx -> X 1
0 Nxxx -> W 1
0 xExS -> W 1
0 xExx -> S 0
0 xxWS -> N 1
0 xxWx -> S 1
0 xxxS -> N 4
0 xxxx -> E 2
1 NExx -> S 4
1 NxWx -> X 1
1 Nxxx -> E 2
1 xExS -> N 0
1 xExx -> N 2
1 xxWS -> X 0
1 xxWx -> S 4
1 xxxS -> X 4
1 xxxx -> S 4
2 NExx -> S 2
2 NxWx -> X 4
2 Nxxx -> E 0
2 xExS -> X 0
2 xExx -> W 3
2 xxWS -> N 4
2 xxWx -> E 4
2 xxxS -> X 2
2 xxxx -> N 2
3 NExx -> S 4
3 NxWx -> S 1
3 Nxxx -> S 3
3 xExS -> N 3
3 xExx -> N 2
3 xxWS -> N 0
3 xxWx -> E 4
3 xxxS -> X 0
3 xxxx -> W 3
4 NExx -> X 4
4 NxWx -> E 0
4 Nxxx -> S 2
4 xExS -> N 2
4 xExx -> S 2
4 xxWS -> E 4
4 xxWx -> E 0
4 xxxS -> W 4
4 xxxx -> E 4

And heres a program for the diamond room (start it on the right-hand side! - it will cover almost the entire room):
- fitness of 0.8906 (must've gotten lucky with random starting positions)

0 NEWx -> S 0
0 NExS -> W 1
0 NExx -> S 3
0 NxWS -> X 4
0 NxWx -> X 0
0 NxxS -> E 1
0 xEWS -> N 4
0 xEWx -> S 2
0 xExS -> N 3
0 xxWS -> X 1
0 xxxx -> S 1
1 NEWx -> X 0
1 NExS -> W 2
1 NExx -> X 2
1 NxWS -> E 0
1 NxWx -> S 3
1 NxxS -> X 3
1 xEWS -> N 1
1 xEWx -> X 4
1 xExS -> N 2
1 xxWS -> E 2
1 xxxx -> S 0
2 NEWx -> X 4
2 NExS -> X 1
2 NExx -> W 3
2 NxWS -> E 1
2 NxWx -> E 3
2 NxxS -> W 3
2 xEWS -> X 2
2 xEWx -> X 1
2 xExS -> N 2
2 xxWS -> N 4
2 xxxx -> N 2
3 NEWx -> S 2
3 NExS -> X 1
3 NExx -> X 0
3 NxWS -> X 1
3 NxWx -> S 1
3 NxxS -> X 0
3 xEWS -> N 0
3 xEWx -> S 3
3 xExS -> X 4
3 xxWS -> N 2
3 xxxx -> S 1
4 NEWx -> S 3
4 NExS -> W 3
4 NExx -> S 1
4 NxWS -> X 4
4 NxWx -> E 2
4 NxxS -> W 2
4 xEWS -> N 4
4 xEWx -> X 1
4 xExS -> W 2
4 xxWS -> X 4
4 xxxx -> W 2
